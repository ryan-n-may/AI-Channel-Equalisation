function [ ...
    LSTM_INPUT, ... 
    FFT_X, FFT_Y, ...
    IFFT_X, IFFT_Y, ...
    CHANNEL_H, ...
    SYMBOL_X, SYMBOL_Y, ...
    PILOTS_X, PILOTS_Y, ...
    pilot_locs ...
    ] = GetChannelData( ...
                Channels, ...
                TransmissionsPerChannel, ...
                M, ...
                Scaling, ...
                SNR, ...
                MDS, ...
                Modulation, ...
                BitLength, ...
                PilotSpacing, ...
                PilotValue, ...
                SymbolDuplications, ...
                ModulationDuplications, ...
                PilotDuplications, ...
                includeAWGN, ...
                includeChannel, ...
                custom, ...
                SamplingRate, ...
                P)
    verbose     = false;
    LSTM_INPUT  = [];
    FFT_X       = []; 
    FFT_Y       = [];
    IFFT_X      = []; 
    IFFT_Y      = [];
    CHANNEL_H   = [];
    SYMBOL_X    = []; 
    SYMBOL_Y    = [];
    PILOTS_X    = [];
    PILOTS_Y    = [];
    
    for j = 1:Channels
        [rayc, awgn] = GenerateChannel(M, SNR, MDS, Scaling, custom, SamplingRate, P);
        for i = 1:TransmissionsPerChannel
            disp("Generating Channel: " + j + " Transmission: " + i)
            [rx_pilots, tx_pilots, pilot_locs, pilot_modulated_x, y_modulated_pilot, x, y, IFFT_pilot_modulated_x, y_modulated_pilot_IFFT] ... 
            = ExecuteChannel(...
                    Modulation, ...
                    BitLength, ...
                    PilotSpacing, ...
                    PilotValue, ...
                    SymbolDuplications, ...
                    ModulationDuplications, ...
                    PilotDuplications, ...
                    rayc, ...
                    awgn, ...
                    includeAWGN, ...
                    includeChannel, ...
                    verbose);

                      
            % Transmitted symbols [0..M-1]
            SYMBOLS_IN  = cat(2, real(x), imag(x));
            SYMBOLS_OUT = cat(2, real(y), imag(y));
            % Received and transmitted pilots 
            RX_PILOTS   = cat(2, real(rx_pilots), imag(rx_pilots));
            TX_PILOTS   = cat(2, real(tx_pilots), imag(tx_pilots));
            % Frequency domain across channel
            FFT_OUT     = cat(2, real(y_modulated_pilot), imag(y_modulated_pilot));
            FFT_IN      = cat(2, real(pilot_modulated_x), real(pilot_modulated_x));
            % Time domain across channel
            IFFT_OUT    = cat(2, real(y_modulated_pilot_IFFT), imag(y_modulated_pilot_IFFT));
            IFFT_IN     = cat(2, real(IFFT_pilot_modulated_x), imag(IFFT_pilot_modulated_x));
            % LSTM Formatted input (tx_pilots : Y)
            LSTM        = cat(2, cat(2, real(tx_pilots), real(y_modulated_pilot_IFFT)), cat(2, imag(tx_pilots), imag(y_modulated_pilot_IFFT)));
            % Channel 
            CHANNEL     = cat(2, real(rayc), imag(rayc));
            %% Amending Data 
            LSTM_INPUT  = cat(2, LSTM_INPUT, LSTM.');
            CHANNEL_H   = cat(2, CHANNEL_H, CHANNEL.');
            SYMBOL_X    = cat(2, SYMBOL_X, SYMBOLS_IN.');
            SYMBOL_Y    = cat(2, SYMBOL_Y, SYMBOLS_OUT.');
            PILOTS_X    = cat(2, PILOTS_X, TX_PILOTS.');
            PILOTS_Y    = cat(2, PILOTS_Y, RX_PILOTS.');
            IFFT_X      = cat(2, IFFT_X, IFFT_IN.');
            IFFT_Y      = cat(2, IFFT_Y, IFFT_OUT.');
            FFT_X       = cat(2, FFT_X, FFT_IN.');
            FFT_Y       = cat(2, FFT_Y, FFT_OUT.');
        end
    end
end